@startuml
'https://plantuml.com/class-diagram

class Game{
        - players: Player[]
        - board Board
        - rules
        + getBoard()
        + endGame()
}

interface MoveCondition{
        + ruleCondition()
}

interface WinCondition{
        + winCondtion()
}

class checkMate implements WinCondition{
        + winCondtion()
}

class ValidMove implements MoveCondition{
        + ruleCondition()
}

class Piece{
        - color: Color
        - initialPosition: Position
        + actualPosition: Position
        - isAlive: boolean
        - hasMoved: boolean
        + isAlive(): boolean
        + getColor(): Color
        + getPosition(): Position
        + move(Board board): void
}

class Board {
        - piece: Piece
        - board: List<List>
        + getX()
        + getY()
        + getPiece()
        + getBoard()
}

class Player {
        - turn: boolean
        - color: Color
        + pieces[]: Piece
        + deadPieces[]: Piece
        + movement (piece Piece, pos Position): void
}

Enum Color {
        BLACK
        WHITE
}

Enum PieceType  {
        PAWN
        ROOK
        KNIGHT
        BISHOP
        QUEEN
        KING
}


interface Movement {
        + move(pos Position): void
}

class MoveUp implements Movement{
        + move(pos Position): void
}

class MoveDown implements Movement{
        + move(pos Position): void
}

class MoveRight implements Movement{
        + move(pos Position): void
}

class MoveLeft implements Movement{
        + move(pos Position): void
}


class Position {
        - x: int
        - y: int
        + getX()
        + getY()
}

Player --> Color
Board --> Movement
Board o-- MoveCondition
Player --> Piece
Board o-- Piece
Movement o-- Piece
Piece -> Color
Game *--- MoveCondition
Game *--- Player
Game o--- Board
Piece --> PieceType
Board o-- WinCondition
@enduml